generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Carousel {
  id Int @id @default(autoincrement())
  image String
  type Type
  type_id Int
  name String @default("nill")
}

model User {
  id        Int             @id @default(autoincrement())
  name      String?
  email     String          @unique
  password  String
  image     String?
  phone     String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  googleId  String?         @unique
  cart      Cart?
  orders    Order[]
  wishlist  Wishlist?
  addresses AddressOnUser[]
}

model Address {
  id         Int             @id @default(autoincrement())
  street     String
  city       String
  state      String
  country    String
  postalCode String
  users      AddressOnUser[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model AddressOnUser {
  id        Int      @id @default(autoincrement())
  userId    Int
  addressId Int
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@unique([userId, addressId])
}

model Product {
  id                 Int               @id @default(autoincrement())
  name               String
  image              String
  description        String
  stock              Int               @default(1)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime?         @updatedAt
  subCategoryId      Int
  actualPrice        Float
  discountPercentage Float?
  offerPrice         Float
  rating             Float?
  brand              String
  categoryId         Int
  cartItems          CartItem[]
  orderedItems       OrderedItem[]
  category           Category          @relation(fields: [categoryId], references: [id])
  subCategory        SubCategory       @relation(fields: [subCategoryId], references: [id])
  wishlistItems      WishlistProduct[]
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  description   String?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  products      Product[]
  subCategories SubCategory[]
}

model SubCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  image       String?
  categoryId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  products    Product[]
  category    Category  @relation(fields: [categoryId], references: [id])
}

model Wishlist {
  id        Int               @id @default(autoincrement())
  userId    Int               @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User              @relation(fields: [userId], references: [id])
  products  WishlistProduct[]
}

model WishlistProduct {
  id         Int      @id @default(autoincrement())
  wishlistId Int
  productId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      Int        @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  totalAmount Float
  user        User       @relation(fields: [userId], references: [id])
  items       CartItem[]
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cartId     Int
  productId  Int
  quantity   Int      @default(1)
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cart       Cart     @relation(fields: [cartId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Order {
  id            Int           @id @default(autoincrement())
  userId        Int
  totalAmount   Float
  orderDate     DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentId     String?       @unique
  orderStatus   String        @default("PENDING")
  paymentStatus OrderStatus   @default(PENDING)
  user          User          @relation(fields: [userId], references: [id])
  items         OrderedItem[]
}

model OrderedItem {
  id            Int         @id @default(autoincrement())
  orderId       Int
  productId     Int
  quantity      Int         @default(1)
  price         Float
  order         Order       @relation(fields: [orderId], references: [id])
  product       Product     @relation(fields: [productId], references: [id])
  
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Type {
  PRODUCT
  CATEGORY
  SUBCATEGORY
}
